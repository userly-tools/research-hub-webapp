{"version":3,"sources":["form/LongAnswer.js","form/ShortAnswer.js","form/CheckboxAnswer.js","form/FormTypeSelector.js","ViewFormTesting.js","form/NewFormType.js","CreateFormTesting.js","App.js","serviceWorker.js","index.js"],"names":["LongAnswer","question","id","onChange","isRequired","required","event","target","value","ShortAnswer","type","CheckboxAnswer","options","useState","Array","length","fill","values","setValues","handleChange","bValues","name","map","index","key","checked","FormTypeSelector","data","param","renderSwitch","formJson","user_id","components","ViewFormTesting","answers","setAnswers","onSubmit","preventDefault","console","log","NewFormType","setProps","className","path","mdiDrag","size","color","defaultValue","CreateFormTesting","form","setForm","useEffect","makeChanges","bForm","i","s","forEach","element","onClick","mdiPlus","list","setList","handle","animation","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4QAgBeA,EAdI,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAM3C,OACE,6BACE,4BAAKH,GACL,8BAAUI,SAAUD,EAAYD,SAPf,SAACG,GACpBH,EAASD,EAAII,EAAMC,OAAOC,YCWfC,EAdK,SAAC,GAA0C,IAAzCR,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAM5C,OACE,6BACE,4BAAKH,GACL,2BAAOS,KAAK,OAAOL,SAAUD,EAAYD,SAPxB,SAACG,GACpBH,EAASD,EAAII,EAAMC,OAAOC,Y,QCoBfG,EAvBQ,SAAC,GAAuC,IAAtCV,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,GAAIC,EAAuB,EAAvBA,SAAUS,EAAa,EAAbA,QAAa,EAEhCC,mBAAS,IAAIC,MAAMF,EAAQG,QAAQC,MAAK,IAFR,mBAErDC,EAFqD,KAE7CC,EAF6C,KAItDC,EAAe,SAACb,GACpB,IAAIc,EAAO,YAAOH,GAClBG,EAAQd,EAAMC,OAAOc,OAASD,EAAQd,EAAMC,OAAOc,MACnDH,EAAUE,GACVjB,EAASD,EAAIkB,IAGf,OACE,6BACE,4BAAKnB,GACJW,EAAQU,KAAI,SAACD,EAAME,GAAP,OACX,yBAAKC,IAAKD,GACR,2BAAOb,KAAK,WAAWW,KAAME,EAAOE,QAASR,EAAOM,GAAQpB,SAAUgB,IADxE,IAC0FE,QCiBnFK,EATU,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEzB,OACE,oCAxBiB,SAACC,EAAOD,GAAU,IAEnC1B,EAKE0B,EALF1B,SACAkB,EAIEQ,EAJFR,aACAP,EAGEe,EAHFf,QACAR,EAEEuB,EAFFvB,WACAF,EACEyB,EADFzB,GAEF,OAAO0B,GAEL,IAAK,YACH,OAAO,kBAAC,EAAD,CAAa1B,GAAIA,EAAID,SAAUA,EAAUG,WAAYA,EAAYD,SAAUgB,IACpF,IAAK,WACH,OAAO,kBAAC,EAAD,CAAYjB,GAAIA,EAAID,SAAUA,EAAUG,WAAYA,EAAYD,SAAUgB,IACnF,IAAK,WACH,OAAO,kBAAC,EAAD,CAAgBjB,GAAIA,EAAID,SAAUA,EAAUW,QAASA,EAAST,SAAUgB,IACjF,QACE,QAQCU,CAAaF,EAAKjB,KAAMiB,KC3BzBG,EAAW,CACf5B,GAAI,YACLmB,KAAM,YACNU,QAAS,MACTC,WAAY,CACT,CACE9B,GAAI,EACJQ,KAAM,YACNT,SAAU,gBACT,CACDC,GAAI,EACJQ,KAAM,WACNT,SAAU,cACVG,WAAY,GACX,CACDF,GAAI,EACJQ,KAAM,WACNT,SAAU,iBACVW,QAAS,CACP,QACA,QACA,QACA,aA6BOqB,EAvBS,WAAO,IAAD,EAEEpB,mBAAS,IAFX,mBAErBqB,EAFqB,KAEZC,EAFY,KAStBhB,EAAe,SAACI,EAAOf,GAC3B2B,EAAW,2BAAID,GAAL,kBAAeX,EAAQf,MAGnC,OACE,0BAAM4B,SAVW,SAAC9B,GAClBA,EAAM+B,iBACNC,QAAQC,IAAIL,KASTJ,EAASE,WAAWV,KAAI,SAACK,EAAMJ,GAAP,OACvB,kBAAC,EAAD,CAAkBC,IAAKD,EAAOI,KAAI,2BAAMA,GAAN,IAAYR,sBAEhD,4BAAQT,KAAK,UAAb,Y,iCCMS8B,EAnDK,SAAC,GAAsB,IAArBb,EAAoB,EAApBA,KAAMc,EAAc,EAAdA,SAGxBvC,EAKEyB,EALFzB,GACAQ,EAIEiB,EAJFjB,KACAT,EAGE0B,EAHF1B,SACAW,EAEEe,EAFFf,QACAR,EACEuB,EADFvB,WAqBF,OACE,yBAAKsC,UAAU,UACb,kBAAC,IAAD,CAAMC,KAAMC,IAASC,KAAM,EAAGC,MAAM,OAAOJ,UAAU,WACrD,2CACA,2BAAOlC,MAAOP,EAAUE,SArBN,SAACG,GACrBmC,EAASvC,EAAI,CAACA,KAAIQ,OAAME,UAASX,SAAUK,EAAMC,OAAOC,MAAOJ,mBAqBlD,cAATM,GAAiC,aAATA,IACxB,oCACE,+CACA,2BAAOA,KAAK,WAAWe,QAASrB,EAAYD,SAjB9B,SAACG,GACrBmC,EAASvC,EAAI,CAACA,KAAIQ,OAAME,UAASX,WAAUG,WAAYE,EAAMC,OAAOkB,cAmBlE,6BACA,wCACA,4BAAQtB,SA1BM,SAACG,GACjBmC,EAASvC,EAAI,CAACA,KAAIQ,KAAKJ,EAAMC,OAAOC,MAAOI,UAASX,WAAUG,iBA0B1D,4BAAQI,MAAM,YAAYuC,cAAY,GAAtC,gBACA,4BAAQvC,MAAM,YAAd,eACA,4BAAQA,MAAM,YAAd,oBAEQ,cAATE,GAAiC,aAATA,GArB3B,0CCmBWsC,EA1CW,WAAO,IAAD,EAENnC,mBAAS,CAAC,CAChCX,GAAI,EACJQ,KAAM,YACNT,SAAU,kBALkB,mBAEvBgD,EAFuB,KAEjBC,EAFiB,KAQ9BC,qBAAU,WACRb,QAAQC,IAAIU,KACX,CAACA,IAEJ,IAAMG,EAAc,SAAClD,EAAIyB,GACvB,IAAI0B,EAAK,YAAOJ,GACZK,EAAI,EAAGC,EAAI,EACfF,EAAMG,SAAQ,SAAAC,GACTvD,IAAOuD,EAAQvD,KAChBqD,EAAID,GAENA,OAEFD,EAAME,GAAK5B,EACXuB,EAAQG,IAOV,OACE,oCACE,wCACA,4BAAQK,QAPI,WACdR,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAC/C,GAAI+C,EAAKlC,OAAQd,SAAU,eAAgBS,KAAM,kBAMxC,kBAAC,IAAD,CAAMiC,KAAMgB,IAASd,KAAM,EAAGC,MAAM,SAC9D,kBAAC,IAAD,CAAec,KAAMX,EAAMY,QAASX,EAASY,OAAO,UAAUC,UAAW,KACtEd,EAAK3B,KAAI,SAACK,GAAD,OACR,yBAAKe,UAAU,MAAMlB,IAAKG,EAAKzB,IAAI,kBAAC,EAAD,CAAayB,KAAMA,EAAMc,SAAUW,WCnBjEY,EAjBH,WACV,OACE,kBAAC,IAAD,cAEE,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACtB,KAAK,IAAIuB,UAAW,WAAO,OAAO,+CAC/C,kBAAC,IAAD,CAAOD,OAAK,EAACtB,KAAK,SAASuB,UAAW,WAAO,OAAO,gDACpD,kBAAC,IAAD,CAAOD,OAAK,EAACtB,KAAK,gBAAgBuB,UAAWjC,IAC7C,kBAAC,IAAD,CAAOgC,OAAK,EAACtB,KAAK,kBAAkBuB,UAAWlB,KAEjD,6BATF,WCKgBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.b4688087.chunk.js","sourcesContent":["import React from 'react'\n\nconst LongAnswer = ({question, id, onChange, isRequired}) => {\n\n  const handleChange = (event) => {\n    onChange(id, event.target.value)\n  }\n\n  return (\n    <div>\n      <h3>{question}</h3>\n      <textarea required={isRequired} onChange={handleChange} />\n    </div>\n  );\n}\n\nexport default LongAnswer;","import React from 'react'\n\nconst ShortAnswer = ({question, id, onChange, isRequired}) => {\n\n  const handleChange = (event) => {\n    onChange(id, event.target.value)\n  }\n\n  return (\n    <div>\n      <h3>{question}</h3>\n      <input type=\"text\" required={isRequired} onChange={handleChange} />\n    </div>\n  );\n}\n\nexport default ShortAnswer;","import React, { useState } from 'react'\n\nconst CheckboxAnswer = ({question, id, onChange, options}) => {\n\n  const [values, setValues] = useState(new Array(options.length).fill(false))\n\n  const handleChange = (event) => {\n    let bValues = [...values]\n    bValues[event.target.name] = !bValues[event.target.name] \n    setValues(bValues)\n    onChange(id, bValues)\n  }\n\n  return (\n    <div>\n      <h3>{question}</h3>\n      {options.map((name, index) => (\n        <div key={index}>\n          <input type=\"checkbox\" name={index} checked={values[index]} onChange={handleChange} /> {name}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default CheckboxAnswer;","import React from 'react'\nimport LongAnswer from './LongAnswer';\nimport ShortAnswer from './ShortAnswer'\nimport CheckboxAnswer from './CheckboxAnswer'\n\nconst renderSwitch = (param, data) => {\n  const {\n    question,\n    handleChange,\n    options,\n    isRequired,\n    id\n  } = data\n  switch(param)\n  {\n    case 'short_ans':\n      return <ShortAnswer id={id} question={question} isRequired={isRequired} onChange={handleChange} />\n    case 'long_ans':\n      return <LongAnswer id={id} question={question} isRequired={isRequired} onChange={handleChange} />\n    case 'checkbox':\n      return <CheckboxAnswer id={id} question={question} options={options} onChange={handleChange} />\n    default:\n      return\n  }\n}\n\nconst FormTypeSelector = ({data}) => {\n\n  return (\n    <>\n      {renderSwitch(data.type, data)}\n    </>\n  );\n}\n\nexport default FormTypeSelector;","import React, { useEffect, useState } from 'react'\nimport FormTypeSelector from './form/FormTypeSelector';\n\nconst formJson = {\n  id: \"unique_id\",\n\tname: \"form_name\",\n\tuser_id: \"abc\",\n\tcomponents: [\n    {\n      id: 1,\n      type: \"short_ans\",\n      question: \"Short Answer\",\n    }, {\n      id: 0,\n      type: \"long_ans\",\n      question: \"Long Answer\",\n      isRequired: 1\n    }, {\n      id: 2,\n      type: \"checkbox\",\n      question: \"Multi Checkbox\",\n      options: [\n        \"Hello\", \n        \"World\",\n        \"Multi\",\n        \"Select\"\n      ]\n    }, \n  ]\n}\n\nconst ViewFormTesting = () => {\n\n  const [answers, setAnswers] = useState({});\n  \n  const submitForm = (event) => {\n    event.preventDefault();\n    console.log(answers)\n  }\n\n  const handleChange = (index, value) => {\n    setAnswers({...answers, [index]: value})\n  }\n\n  return (\n    <form onSubmit={submitForm}>\n      {formJson.components.map((data, index) => (\n        <FormTypeSelector key={index} data={{...data, handleChange}} />\n      ))}\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default ViewFormTesting;","import { mdiDrag } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport React from 'react'\n\nconst NewFormType = ({data, setProps}) => {\n\n  const {\n    id,\n    type,\n    question,\n    options,\n    isRequired\n  } = data;\n\n\n  const changeQuestion =(event) => {\n    setProps(id, {id, type, options, question: event.target.value, isRequired})\n  }\n\n  const changeType =(event) => {\n    setProps(id, {id, type:event.target.value, options, question, isRequired})\n  }\n\n  const changeRequired =(event) => {\n    setProps(id, {id, type, options, question, isRequired: event.target.checked})\n  }\n\n  const renderOptions = () => {\n    return (\n    <div>Options</div>)\n  }\n\n  return (\n    <div className=\"border\">\n      <Icon path={mdiDrag} size={1} color=\"grey\" className=\"handle\" />\n      <label>Question</label>\n      <input value={question} onChange={changeQuestion} />\n      {(type === \"short_ans\" || type === \"long_ans\") && \n        <>\n          <label>Is Required?</label>\n          <input type=\"checkbox\" checked={isRequired} onChange={changeRequired} />\n        </>\n      }\n      <br/>\n      <label>Type:</label>\n      <select onChange={changeType}>\n        <option value=\"short_ans\" defaultValue>Short Answer</option>\n        <option value=\"long_ans\">Long Answer</option>\n        <option value=\"checkbox\">Multiple Choice</option>\n      </select>\n      {type !== \"short_ans\" && type !== \"long_ans\" && renderOptions()}\n    </div>\n  );\n}\n\nexport default NewFormType;","import { mdiPlus } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport React, { useEffect, useState } from 'react'\nimport { ReactSortable } from \"react-sortablejs\";\nimport NewFormType from './form/NewFormType'\n\nconst CreateFormTesting = () => {\n\n  const [form, setForm] = useState([{\n    id: 0,\n    type: \"short_ans\",\n    question: \"New Question\"\n  }]);\n  \n  useEffect(()=> {\n    console.log(form)\n  }, [form])\n\n  const makeChanges = (id, data) => {\n    let bForm = [...form]\n    let i = 0, s = 0;\n    bForm.forEach(element => {\n      if(id === element.id) {\n        s = i;\n      }\n      i++;\n    });\n    bForm[s] = data\n    setForm(bForm)\n  }\n\n  const addForm = () => {\n    setForm([...form, {id: form.length, question: \"New Question\", type: \"short_ans\"}])\n  }\n\n  return (\n    <>\n      <h1>New Form</h1>\n      <button onClick={addForm}><Icon path={mdiPlus} size={1} color=\"red\" /></button>\n      <ReactSortable list={form} setList={setForm} handle=\".handle\" animation={100}>\n        {form.map((data) => (\n          <div className=\"p-3\" key={data.id}><NewFormType data={data} setProps={makeChanges} /></div>\n        ))}\n      </ReactSortable>\n    </>\n  );\n}\n\nexport default CreateFormTesting;","import React from 'react';\nimport { HashRouter as DefaultRouter, Switch, Route } from \"react-router-dom\";\nimport ViewFormTesting from './ViewFormTesting'\nimport CreateFormTesting from './CreateFormTesting'\n\nconst App = () => {\n  return (\n    <DefaultRouter>\n      Header\n      <hr/>\n      <Switch>\n        <Route exact path=\"/\" component={() => {return <>Home</>}} />\n        <Route exact path=\"/login\" component={() => {return <>Login</>}} />\n        <Route exact path=\"/view-testing\" component={ViewFormTesting} />\n        <Route exact path=\"/create-testing\" component={CreateFormTesting} />\n      </Switch>\n      <hr/>\n      Footer\n    </DefaultRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './custom.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}