{"version":3,"sources":["form/LongAnswer.js","form/ShortAnswer.js","form/FormTypeSelector.js","ViewFormTesting.js","form/NewFormType.js","CreateFormTesting.js","App.js","serviceWorker.js","index.js"],"names":["LongAnswer","question","index","onChange","event","target","value","ShortAnswer","type","FormTypeSelector","data","param","handleChange","options","renderSwitch","formJson","id","name","user_id","components","ViewFormTesting","useState","answers","setAnswers","useEffect","console","log","map","key","NewFormType","CreateFormTesting","form","setForm","list","setList","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2QAgBeA,EAdI,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAMpC,OACE,6BACE,4BAAKF,GACL,8BAAUE,SAPO,SAACC,GACpBD,EAASD,EAAOE,EAAMC,OAAOC,YCWlBC,EAdK,SAAC,GAAiC,IAAhCN,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAMrC,OACE,6BACE,4BAAKF,GACL,2BAAOO,KAAK,OAAOL,SAPF,SAACC,GACpBD,EAASD,EAAOE,EAAMC,OAAOC,YC0BlBG,EATU,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEzB,OACE,oCArBiB,SAACC,EAAOD,GAAU,IAEnCT,EAIES,EAJFT,SACAC,EAGEQ,EAHFR,MACAU,EAEEF,EAFFE,aAEEF,EADFG,QAEF,OAAOF,GAEL,IAAK,YACH,OAAO,kBAAC,EAAD,CAAaV,SAAUA,EAAUC,MAAOA,EAAOC,SAAUS,IAClE,IAAK,WACH,OAAO,kBAAC,EAAD,CAAYX,SAAUA,EAAUC,MAAOA,EAAOC,SAAUS,IACjE,QACE,QAQCE,CAAaJ,EAAKF,KAAME,KCvBzBK,EAAW,CACfC,GAAI,YACLC,KAAM,YACNC,QAAS,MACTC,WAAY,CACT,CACEX,KAAM,YACNP,SAAU,gBACT,CACDO,KAAM,WACNP,SAAU,iBA0BDmB,EArBS,WAAO,IAAD,EAEEC,mBAAS,IAFX,mBAErBC,EAFqB,KAEZC,EAFY,KAI5BC,qBAAU,WACRC,QAAQC,IAAIJ,KACX,CAACA,IAEJ,IAAMV,EAAe,SAACV,EAAOI,GAC3BiB,EAAW,2BAAID,GAAL,kBAAepB,EAAQI,MAGnC,OACE,oCACGS,EAASI,WAAWQ,KAAI,SAACjB,EAAMR,GAAP,OACvB,kBAAC,EAAD,CAAkB0B,IAAK1B,EAAOQ,KAAI,2BAAMA,GAAN,IAAYR,QAAOU,wB,QCF9CiB,EATK,SAAC,GAAY,IAAXnB,EAAU,EAAVA,KAEpB,OACE,6BACGA,EAAKO,OCFGa,EApBW,WAAO,IAAD,EAENT,mBAAS,CAAC,CAAGL,GAAG,EAAGC,KAAM,SACjD,CAAGD,GAAG,EAAGC,KAAM,WAHe,mBAEvBc,EAFuB,KAEjBC,EAFiB,KAS9B,OAJAR,qBAAU,WACRC,QAAQC,IAAIK,KACX,CAACA,IAGF,oCACE,kBAAC,IAAD,CAAeE,KAAMF,EAAMG,QAASF,GACjCD,EAAKJ,KAAI,SAACjB,GAAD,OACR,yBAAKkB,IAAKlB,EAAKM,IAAI,kBAAC,EAAD,CAAaN,KAAMA,WCKjCyB,EAjBH,WACV,OACE,kBAAC,IAAD,cAEE,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,WAAO,OAAO,+CAC/C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASC,UAAW,WAAO,OAAO,gDACpD,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,gBAAgBC,UAAWlB,IAC7C,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,kBAAkBC,UAAWR,KAEjD,6BATF,WCKgBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.75288571.chunk.js","sourcesContent":["import React from 'react'\n\nconst LongAnswer = ({question, index, onChange}) => {\n\n  const handleChange = (event) => {\n    onChange(index, event.target.value)\n  }\n\n  return (\n    <div>\n      <h3>{question}</h3>\n      <textarea onChange={handleChange} />\n    </div>\n  );\n}\n\nexport default LongAnswer;","import React from 'react'\n\nconst ShortAnswer = ({question, index, onChange}) => {\n\n  const handleChange = (event) => {\n    onChange(index, event.target.value)\n  }\n\n  return (\n    <div>\n      <h3>{question}</h3>\n      <input type=\"text\" onChange={handleChange} />\n    </div>\n  );\n}\n\nexport default ShortAnswer;","import React from 'react'\nimport LongAnswer from './LongAnswer';\nimport ShortAnswer from './ShortAnswer'\n\nconst renderSwitch = (param, data) => {\n  const {\n    question,\n    index,\n    handleChange,\n    options\n  } = data\n  switch(param)\n  {\n    case 'short_ans':\n      return <ShortAnswer question={question} index={index} onChange={handleChange} />\n    case 'long_ans':\n      return <LongAnswer question={question} index={index} onChange={handleChange} />\n    default:\n      return\n  }\n}\n\nconst FormTypeSelector = ({data}) => {\n\n  return (\n    <>\n      {renderSwitch(data.type, data)}\n    </>\n  );\n}\n\nexport default FormTypeSelector;","import React, { useEffect, useState } from 'react'\nimport FormTypeSelector from './form/FormTypeSelector';\n\nconst formJson = {\n  id: \"unique_id\",\n\tname: \"form_name\",\n\tuser_id: \"abc\",\n\tcomponents: [\n    {\n      type: \"short_ans\",\n      question: \"Short Answer\",\n    }, {\n      type: \"long_ans\",\n      question: \"Long Answer\",\n    }, \n  ]\n}\n\nconst ViewFormTesting = () => {\n\n  const [answers, setAnswers] = useState({});\n  \n  useEffect(()=> {\n    console.log(answers)\n  }, [answers])\n\n  const handleChange = (index, value) => {\n    setAnswers({...answers, [index]: value})\n  }\n\n  return (\n    <>\n      {formJson.components.map((data, index) => (\n        <FormTypeSelector key={index} data={{...data, index, handleChange}} />\n      ))}\n    </>\n  );\n}\n\nexport default ViewFormTesting;","import React from 'react'\nimport LongAnswer from './LongAnswer';\nimport ShortAnswer from './ShortAnswer'\n\nconst renderSwitch = (param, data) => {\n  const {\n    question,\n    index,\n    handleChange,\n    options\n  } = data\n  switch(param)\n  {\n    case 'short_ans':\n      return <ShortAnswer question={question} index={index} onChange={handleChange} />\n    case 'long_ans':\n      return <LongAnswer question={question} index={index} onChange={handleChange} />\n    default:\n      return\n  }\n}\n\nconst NewFormType = ({data}) => {\n\n  return (\n    <div>\n      {data.name}\n    </div>\n  );\n}\n\nexport default NewFormType;","import React, { useEffect, useState } from 'react'\nimport { ReactSortable } from \"react-sortablejs\";\nimport NewFormType from './form/NewFormType'\n\nconst CreateFormTesting = () => {\n\n  const [form, setForm] = useState([{  id:0, name: \"shrek\" },\n  {  id:1, name: \"fiona\" }]);\n  \n  useEffect(()=> {\n    console.log(form)\n  }, [form])\n\n  return (\n    <>\n      <ReactSortable list={form} setList={setForm}>\n        {form.map((data) => (\n          <div key={data.id}><NewFormType data={data} /></div>\n        ))}\n      </ReactSortable>\n    </>\n  );\n}\n\nexport default CreateFormTesting;","import React from 'react';\nimport { HashRouter as DefaultRouter, Switch, Route } from \"react-router-dom\";\nimport ViewFormTesting from './ViewFormTesting'\nimport CreateFormTesting from './CreateFormTesting'\n\nconst App = () => {\n  return (\n    <DefaultRouter>\n      Header\n      <hr/>\n      <Switch>\n        <Route exact path=\"/\" component={() => {return <>Home</>}} />\n        <Route exact path=\"/login\" component={() => {return <>Login</>}} />\n        <Route exact path=\"/view-testing\" component={ViewFormTesting} />\n        <Route exact path=\"/create-testing\" component={CreateFormTesting} />\n      </Switch>\n      <hr/>\n      Footer\n    </DefaultRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './custom.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}